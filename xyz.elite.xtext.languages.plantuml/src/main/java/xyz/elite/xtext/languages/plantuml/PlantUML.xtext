grammar xyz.elite.xtext.languages.plantuml.PlantUML with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate plantUML "http://www.elite.xyz/xtext/languages/plantuml/PlantUML"

Model:
    NEWLINE* 'SEQUENCE'? sequence_diagrams+=SQ_Diagram NEWLINE*;

SQ_Diagram:
    {SQ_Diagram}
    DIAGRAM_START (NEWLINE | elements+=SQ_SequenceElement)* DIAGRAM_END;

// ---------------------------
//      SEQUENCE ELEMENTS
// ---------------------------
SQ_SequenceElement:
    (
        SQ_Message
        | SQ_ParticipantDefiniton
        | SQ_Delay
    )
    NEWLINE;

SQ_Message:
    sender=SQ_Participant arrow=SQ_Arrow receiver=SQ_Participant (':' (payload=PT_RequestResponse)? description=SQ_Description)?;

SQ_ParticipantDefiniton:
    ('actor'|'boundary'|'control'|'collections'|'entity'|'database'|'participant') participant=SQ_Participant 
    ('as' alias=ID)? (color=SQ_Color)?
    ('order' priority=INT)?;

SQ_Delay:
    {SQ_Delay}
    '...' (wait=PT_Wait)? description=SQ_Description '...';

SQ_Participant:
    (name=ID|name=STRING);
        
SQ_Arrow:
    '-'? '->' | '<-' '-'?;

SQ_Description:
    (ID | STRING | INT | ANY_OTHER)*;

SQ_Color:
    hexcode=COLOR | ('#' name=ID);

// ----------------------------
//   PLANTESTIC MODIFICATIONS
// ----------------------------
PT_Wait:
    'wait(' time=INT unit=('ns'|'ms'|'s'|'min'|'h'|'d') ')';

PT_RequestResponse:
    PT_Request | PT_Response;

PT_Request returns PT_RequestResponse:
    {PT_Request}
    method=PT_RequestMethod url=STRING ('(' param+=PT_Parameter (',' param+=PT_Parameter)* ')')?;

PT_RequestMethod:
    'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';

PT_Response returns PT_RequestResponse:
    {PT_Response}
    'status(' acceptableCodes+=INT ('|' acceptableCodes+=INT)* ')' ('-' '(' param+=PT_Parameter (',' param+=PT_Parameter)* ')')?;

PT_Parameter:
    {PT_Parameter}
    name=ID ':' value=STRING;

// ----------------------------
//      LEXER/PARSER ATOMS
// ----------------------------
terminal DIAGRAM_START:
    '@startuml';

terminal DIAGRAM_END:
    '@enduml';

terminal COLOR:
    '#' (('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')
        (('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9'))?);

@Override
terminal ID:
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

@Override
terminal STRING:
    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

// NEWLINE has to be a visible terminal in this grammar since it has a semantic meaning (end of sequence element)
terminal NEWLINE:
    '\r'? '\n';

@Override
terminal SL_COMMENT:
    "'" !('\n'|'\r')*;

@Override
terminal ML_COMMENT:
    "/'" -> "'/";

@Override
terminal WS:
    (' '|'\t')+;

@Override
terminal ANY_OTHER:
    .;